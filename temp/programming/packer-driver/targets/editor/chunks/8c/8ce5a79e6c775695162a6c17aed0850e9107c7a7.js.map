{"version":3,"sources":["file:///Users/longbow/node_modules/lodash/toInteger.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","toFinite","toInteger","value","result","remainder","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;;8BAEHA,Y,GAAe,cAAYC,G;;AACjCH,MAAAA,UAAU,CAACI,MAAX,CAAkBF,YAAlB,EAAgC,UAAUG,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC,YAAIC,QAAQ,GAAGJ,OAAO,CAAC,YAAD,CAAtB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,iBAASK,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,cAAIC,MAAM,GAAGH,QAAQ,CAACE,KAAD,CAArB;AAAA,cACIE,SAAS,GAAGD,MAAM,GAAG,CADzB;AAGA,iBAAOA,MAAM,KAAKA,MAAX,GAAqBC,SAAS,GAAGD,MAAM,GAAGC,SAAZ,GAAwBD,MAAtD,GAAgE,CAAvE;AACD;;AAEDN,QAAAA,MAAM,CAACF,OAAP,GAAiBM,SAAjB,CAvC0F,CA0C3F;;AAEA,2BAAAI,WAAW,GAAGR,MAAM,CAACF,OAArB;AAGC,OA/CD,EA+CG,OAAO;AACR,sBAAcJ;AADN,OAAP,CA/CH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './toFinite';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var toFinite = require('./toFinite');\n\n /**\n  * Converts `value` to an integer.\n  *\n  * **Note:** This method is loosely based on\n  * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n  *\n  * @static\n  * @memberOf _\n  * @since 4.0.0\n  * @category Lang\n  * @param {*} value The value to convert.\n  * @returns {number} Returns the converted integer.\n  * @example\n  *\n  * _.toInteger(3.2);\n  * // => 3\n  *\n  * _.toInteger(Number.MIN_VALUE);\n  * // => 0\n  *\n  * _.toInteger(Infinity);\n  * // => 1.7976931348623157e+308\n  *\n  * _.toInteger('3.2');\n  * // => 3\n  */\n function toInteger(value) {\n   var result = toFinite(value),\n       remainder = result % 1;\n\n   return result === result ? (remainder ? result - remainder : result) : 0;\n }\n\n module.exports = toInteger;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './toFinite': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}