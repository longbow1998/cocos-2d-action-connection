{"version":3,"sources":["file:///Users/longbow/node_modules/lodash/_baseSlice.js"],"names":["_cjsLoader","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","baseSlice","array","start","end","index","length","result","Array","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;;8BAEDC,Y,GAAe,cAAYC,G;;AACjCF,MAAAA,UAAU,CAACG,MAAX,CAAkBF,YAAlB,EAAgC,UAAUG,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;;AAGC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAASC,SAAT,CAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCC,GAAjC,EAAsC;AACpC,cAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,cACIC,MAAM,GAAGJ,KAAK,CAACI,MADnB;;AAGA,cAAIH,KAAK,GAAG,CAAZ,EAAe;AACbA,YAAAA,KAAK,GAAG,CAACA,KAAD,GAASG,MAAT,GAAkB,CAAlB,GAAuBA,MAAM,GAAGH,KAAxC;AACD;;AACDC,UAAAA,GAAG,GAAGA,GAAG,GAAGE,MAAN,GAAeA,MAAf,GAAwBF,GAA9B;;AACA,cAAIA,GAAG,GAAG,CAAV,EAAa;AACXA,YAAAA,GAAG,IAAIE,MAAP;AACD;;AACDA,UAAAA,MAAM,GAAGH,KAAK,GAAGC,GAAR,GAAc,CAAd,GAAoBA,GAAG,GAAGD,KAAP,KAAkB,CAA9C;AACAA,UAAAA,KAAK,MAAM,CAAX;AAEA,cAAII,MAAM,GAAGC,KAAK,CAACF,MAAD,CAAlB;;AACA,iBAAO,EAAED,KAAF,GAAUC,MAAjB,EAAyB;AACvBC,YAAAA,MAAM,CAACF,KAAD,CAAN,GAAgBH,KAAK,CAACG,KAAK,GAAGF,KAAT,CAArB;AACD;;AACD,iBAAOI,MAAP;AACD;;AAEDT,QAAAA,MAAM,CAACF,OAAP,GAAiBK,SAAjB,CAlC0F,CAqC3F;;AAEA,2BAAAQ,WAAW,GAAGX,MAAM,CAACF,OAArB;AAGC,OA1CD,EA0CG,EA1CH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n /**\n  * The base implementation of `_.slice` without an iteratee call guard.\n  *\n  * @private\n  * @param {Array} array The array to slice.\n  * @param {number} [start=0] The start position.\n  * @param {number} [end=array.length] The end position.\n  * @returns {Array} Returns the slice of `array`.\n  */\n function baseSlice(array, start, end) {\n   var index = -1,\n       length = array.length;\n\n   if (start < 0) {\n     start = -start > length ? 0 : (length + start);\n   }\n   end = end > length ? length : end;\n   if (end < 0) {\n     end += length;\n   }\n   length = start > end ? 0 : ((end - start) >>> 0);\n   start >>>= 0;\n\n   var result = Array(length);\n   while (++index < length) {\n     result[index] = array[index + start];\n   }\n   return result;\n }\n\n module.exports = baseSlice;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, {});\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}