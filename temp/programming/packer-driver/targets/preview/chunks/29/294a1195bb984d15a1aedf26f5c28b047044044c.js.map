{"version":3,"sources":["file:///Users/longbow/node_modules/lodash/isSymbol.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","baseGetTag","isObjectLike","symbolTag","isSymbol","value","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;AACgBC,MAAAA,K,iBAAhBD,Y;;;8BAEHA,Y,GAAe,cAAYE,G;;AACjCJ,MAAAA,UAAU,CAACK,MAAX,CAAkBH,YAAlB,EAAgC,UAAUI,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC,YAAIC,UAAU,GAAGJ,OAAO,CAAC,eAAD,CAAxB;AAAA,YACIK,YAAY,GAAGL,OAAO,CAAC,gBAAD,CAD1B;AAGA;;;AACA,YAAIM,SAAS,GAAG,iBAAhB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,iBAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,iBAAO,OAAOA,KAAP,IAAgB,QAAhB,IACJH,YAAY,CAACG,KAAD,CAAZ,IAAuBJ,UAAU,CAACI,KAAD,CAAV,IAAqBF,SAD/C;AAED;;AAEDL,QAAAA,MAAM,CAACF,OAAP,GAAiBQ,QAAjB,CAhC0F,CAmC3F;;AAEA,2BAAAE,WAAW,GAAGR,MAAM,CAACF,OAArB;AAGC,OAxCD,EAwCG,OAAO;AACR,yBAAiBL,IADT;AAER,0BAAkBE;AAFV,OAAP,CAxCH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './_baseGetTag';\nimport { __cjsMetaURL as _req0} from './isObjectLike';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var baseGetTag = require('./_baseGetTag'),\n     isObjectLike = require('./isObjectLike');\n\n /** `Object#toString` result references. */\n var symbolTag = '[object Symbol]';\n\n /**\n  * Checks if `value` is classified as a `Symbol` primitive or object.\n  *\n  * @static\n  * @memberOf _\n  * @since 4.0.0\n  * @category Lang\n  * @param {*} value The value to check.\n  * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n  * @example\n  *\n  * _.isSymbol(Symbol.iterator);\n  * // => true\n  *\n  * _.isSymbol('abc');\n  * // => false\n  */\n function isSymbol(value) {\n   return typeof value == 'symbol' ||\n     (isObjectLike(value) && baseGetTag(value) == symbolTag);\n }\n\n module.exports = isSymbol;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './_baseGetTag': _req,\n  './isObjectLike': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}